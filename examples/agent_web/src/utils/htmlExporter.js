/**
 * HTMLÂØºÂá∫Â∑•ÂÖ∑
 * Áî®‰∫éÂ∞ÜÂØπËØùËÆ∞ÂΩïÂØºÂá∫‰∏∫HTMLÊñá‰ª∂ÔºåÊîØÊåÅMarkdownÊ∏≤Êüì„ÄÅË°®Ê†ºÂíåEChartsÂõæË°®
 */

/**
 * ÂØºÂá∫ÂØπËØùËÆ∞ÂΩï‰∏∫HTMLÊñá‰ª∂
 * @param {Object} conversation - ÂØπËØùËÆ∞ÂΩïÂØπË±°
 * @param {Array} visibleMessages - ÂèØËßÅÁöÑÊ∂àÊÅØÂàóË°®
 */
export const exportToHTML = (conversation, visibleMessages) => {
  console.log('üöÄ exportToHTML ÂáΩÊï∞ÂºÄÂßãÊâßË°å');
  console.log('üìã conversation:', conversation);
  console.log('üìù ÂéüÂßãÊ∂àÊÅØÊï∞Èáè:', conversation.messages?.length || 0);
  console.log('‚úÖ ËøáÊª§ÂêéÁöÑÂèØËßÅÊ∂àÊÅØÊï∞Èáè:', visibleMessages.length);
  console.log('üìÑ ÂèØËßÅÊ∂àÊÅØÂÜÖÂÆπ:', visibleMessages);

  const htmlContent = generateHTMLContent(conversation, visibleMessages);
  downloadHTML(htmlContent, conversation.title);
};

/**
 * ÁîüÊàêHTMLÂÜÖÂÆπ
 * @param {Object} conversation - ÂØπËØùËÆ∞ÂΩïÂØπË±°
 * @param {Array} visibleMessages - ÂèØËßÅÁöÑÊ∂àÊÅØÂàóË°®
 * @returns {string} HTMLÂÜÖÂÆπÂ≠óÁ¨¶‰∏≤
 */
const generateHTMLContent = (conversation, visibleMessages) => {
  const title = conversation.title || 'ÂØπËØùËÆ∞ÂΩï';
  const exportTime = new Date().toLocaleString('zh-CN');
  const messageCount = visibleMessages.length;
  
  // ÊûÑÂª∫Ê∂àÊÅØHTML
  let messagesHtml = '';
  
  visibleMessages.forEach((message, index) => {
    if (message.role === 'user') {
      const content = renderMarkdown(message.content || '');
      messagesHtml += `
        <div class="message user">
          <div class="avatar">üë§</div>
          <div class="message-bubble">
            <div class="message-content">${content}</div>
          </div>
        </div>`;
    } else if (message.role === 'assistant') {
      if (message.tool_calls && message.tool_calls.length > 0) {
        // Â∑•ÂÖ∑Ë∞ÉÁî®Ê∂àÊÅØ
        message.tool_calls.forEach(toolCall => {
          const toolName = toolCall.function?.name || 'Êú™Áü•Â∑•ÂÖ∑';
          const toolArgs = toolCall.function?.arguments || '{}';
          messagesHtml += `
            <div class="message tool">
              <div class="avatar">üîß</div>
              <div class="message-bubble">
                <div class="tool-info">Â∑•ÂÖ∑Ë∞ÉÁî®: ${escapeHtml(toolName)}</div>
                <div class="message-content">
                  <pre><code>${escapeHtml(toolArgs)}</code></pre>
                </div>
              </div>
            </div>`;
        });
      } else if (message.show_content) {
        // AIÂä©ÊâãÂõûÂ§ç
        const content = renderMarkdown(message.show_content);
        messagesHtml += `
          <div class="message assistant">
            <div class="avatar">ü§ñ</div>
            <div class="message-bubble">
              <div class="message-content">${content}</div>
            </div>
          </div>`;
      }
    } else if (message.role === 'tool') {
      const toolName = message.name || 'Êú™Áü•Â∑•ÂÖ∑';
      const content = typeof message.content === 'object' 
        ? JSON.stringify(message.content, null, 2) 
        : (message.content || '');
      messagesHtml += `
        <div class="message tool-result">
          <div class="avatar">üìã</div>
          <div class="message-bubble">
            <div class="tool-info">ÊâßË°åÁªìÊûú</div>
            <div class="message-content">
              <pre><code>${escapeHtml(content)}</code></pre>
            </div>
          </div>
        </div>`;
    }
  });
  
  // ÊûÑÂª∫ÂÆåÊï¥ÁöÑHTML
  const htmlContent = `<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÂØπËØùËÆ∞ÂΩï - ${escapeHtml(title)}</title>
    <script src="https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            color: #2d3748;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 16px;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            color: white;
            padding: 40px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 32px;
            margin-bottom: 12px;
            font-weight: 700;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .meta {
            opacity: 0.9;
            font-size: 16px;
            font-weight: 500;
        }
        
        .messages {
            padding: 40px;
            background: #f8fafc;
        }
        
        .message {
            display: flex;
            margin-bottom: 32px;
            align-items: flex-start;
            animation: fadeInUp 0.5s ease-out;
        }
        
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .message.user {
            justify-content: flex-end;
        }
        
        .avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            font-weight: 600;
            color: white;
            flex-shrink: 0;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .message.user .avatar {
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            margin-left: 16px;
            order: 2;
        }
        
        .message.assistant .avatar {
            background: linear-gradient(135deg, #10b981 0%, #047857 100%);
            margin-right: 16px;
        }
        
        .message.tool .avatar {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            margin-right: 16px;
        }
        
        .message.tool-result .avatar {
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            margin-right: 16px;
        }
        
        .message-bubble {
            max-width: 75%;
            padding: 20px 24px;
            border-radius: 20px;
            position: relative;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            backdrop-filter: blur(10px);
        }
        
        .message.user .message-bubble {
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            color: white;
        }
        
        .message.assistant .message-bubble {
            background: white;
            color: #1a202c;
            border: 1px solid #e2e8f0;
        }
        
        .message.tool .message-bubble {
            background: #fef3c7;
            color: #92400e;
            border: 1px solid #fbbf24;
        }
        
        .message.tool-result .message-bubble {
            background: #f3e8ff;
            color: #6b46c1;
            border: 1px solid #c084fc;
        }
        
        .tool-info {
            font-weight: 700;
            margin-bottom: 12px;
            font-size: 14px;
            opacity: 0.8;
        }
        
        .message-content {
            word-wrap: break-word;
            line-height: 1.7;
        }
        
        /* Markdown Ê†∑Âºè */
        .message-content h1,
        .message-content h2,
        .message-content h3,
        .message-content h4,
        .message-content h5,
        .message-content h6 {
            margin: 16px 0 12px 0;
            font-weight: 700;
            line-height: 1.3;
        }
        
        .message-content h1 { font-size: 24px; }
        .message-content h2 { font-size: 20px; }
        .message-content h3 { font-size: 18px; }
        .message-content h4 { font-size: 16px; }
        .message-content h5 { font-size: 14px; }
        .message-content h6 { font-size: 12px; }
        
        .message-content p {
            margin: 12px 0;
        }
        
        .message-content strong {
            font-weight: 700;
        }
        
        .message-content em {
            font-style: italic;
        }
        
        .message-content ul,
        .message-content ol {
            margin: 12px 0;
            padding-left: 24px;
        }
        
        .message-content li {
            margin: 4px 0;
        }
        
        .message-content blockquote {
            border-left: 4px solid #e2e8f0;
            padding-left: 16px;
            margin: 16px 0;
            font-style: italic;
            opacity: 0.8;
        }
        
        .message.user .message-content blockquote {
            border-left-color: rgba(255, 255, 255, 0.3);
        }
        
        .message-content pre {
            background: #1a202c;
            color: #e2e8f0;
            padding: 20px;
            border-radius: 12px;
            overflow-x: auto;
            margin: 16px 0;
            font-family: 'Monaco', 'Menlo', 'Consolas', monospace;
            font-size: 14px;
            line-height: 1.5;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .message-content code {
            background: #f1f5f9;
            color: #e53e3e;
            padding: 3px 8px;
            border-radius: 6px;
            font-family: 'Monaco', 'Menlo', 'Consolas', monospace;
            font-size: 13px;
            font-weight: 600;
        }
        
        .message.user .message-content code {
            background: rgba(255, 255, 255, 0.2);
            color: #fed7d7;
        }
        
        .message-content pre code {
            background: none;
            color: inherit;
            padding: 0;
            border-radius: 0;
        }
        
        /* Ë°®Ê†ºÊ†∑Âºè */
        .message-content table {
            width: 100%;
            border-collapse: collapse;
            margin: 16px 0;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .message-content th,
        .message-content td {
            padding: 12px 16px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .message-content th {
            background: #f8fafc;
            font-weight: 700;
            color: #2d3748;
        }
        
        .message-content tr:hover {
            background: #f7fafc;
        }
        
        .message.user .message-content table {
            background: rgba(255, 255, 255, 0.1);
        }
        
        .message.user .message-content th {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }
        
        .message.user .message-content td {
            color: white;
            border-bottom-color: rgba(255, 255, 255, 0.2);
        }
        
        /* ECharts ÂÆπÂô®Ê†∑Âºè */
        .echarts-container {
            width: 100%;
            height: 400px;
            margin: 16px 0;
            border-radius: 12px;
            background: white;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        .message.user .echarts-container {
            background: rgba(255, 255, 255, 0.1);
        }
        
        /* ÂìçÂ∫îÂºèËÆæËÆ° */
        @media (max-width: 768px) {
            body {
                padding: 10px;
            }
            
            .container {
                margin: 0;
                border-radius: 12px;
            }
            
            .header {
                padding: 30px 20px;
            }
            
            .header h1 {
                font-size: 24px;
            }
            
            .messages {
                padding: 20px;
            }
            
            .message-bubble {
                max-width: 90%;
                padding: 16px 20px;
            }
            
            .avatar {
                width: 40px;
                height: 40px;
                font-size: 16px;
            }
            
            .echarts-container {
                height: 300px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>${escapeHtml(title)}</h1>
            <div class="meta">
                üìÖ ÂØºÂá∫Êó∂Èó¥: ${escapeHtml(exportTime)}<br>
                üí¨ Ê∂àÊÅØÊï∞Èáè: ${messageCount} Êù°
            </div>
        </div>
        <div class="messages">${messagesHtml}
        </div>
    </div>
    

</body>
</html>`;

  return htmlContent;
};

/**
 * Ê∏≤ÊüìMarkdownÂÜÖÂÆπ
 * @param {string} text - MarkdownÊñáÊú¨
 * @returns {string} Ê∏≤ÊüìÂêéÁöÑHTML
 */
const renderMarkdown = (text) => {
  if (!text) return '';
  
  let html = escapeHtml(text);
  
  // Â§ÑÁêÜECharts‰ª£Á†ÅÂùó
  html = processEChartsBlocks(html);
  
  // Â§ÑÁêÜ‰ª£Á†ÅÂùóÔºàÂú®ÂÖ∂‰ªñÂ§ÑÁêÜ‰πãÂâçÔºâ
  html = html.replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>');
  
  // Â§ÑÁêÜË°åÂÜÖ‰ª£Á†Å
  html = html.replace(/`([^`]+)`/g, '<code>$1</code>');
  
  // Â§ÑÁêÜÊ†áÈ¢ò
  html = html.replace(/^### (.*$)/gm, '<h3>$1</h3>');
  html = html.replace(/^## (.*$)/gm, '<h2>$1</h2>');
  html = html.replace(/^# (.*$)/gm, '<h1>$1</h1>');
  
  // Â§ÑÁêÜÁ≤ó‰ΩìÂíåÊñú‰Ωì
  html = html.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>');
  html = html.replace(/\*([^*]+)\*/g, '<em>$1</em>');
  
  // Â§ÑÁêÜÈìæÊé•
  html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>');
  
  // Â§ÑÁêÜÂàóË°®
  html = html.replace(/^\* (.+)$/gm, '<li>$1</li>');
  html = html.replace(/^- (.+)$/gm, '<li>$1</li>');
  html = html.replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>');
  
  // Â§ÑÁêÜÊúâÂ∫èÂàóË°®
  html = html.replace(/^\d+\. (.+)$/gm, '<li>$1</li>');
  
  // Â§ÑÁêÜÂºïÁî®
  html = html.replace(/^> (.+)$/gm, '<blockquote>$1</blockquote>');
  
  // Â§ÑÁêÜË°®Ê†º
  html = processMarkdownTables(html);
  
  // Â§ÑÁêÜÊÆµËêΩ
  html = html.replace(/\n\n/g, '</p><p>');
  html = '<p>' + html + '</p>';
  
  // Ê∏ÖÁêÜÁ©∫ÊÆµËêΩ
  html = html.replace(/<p><\/p>/g, '');
  html = html.replace(/<p>\s*<\/p>/g, '');
  
  return html;
};

/**
 * Â§ÑÁêÜECharts‰ª£Á†ÅÂùó
 * @param {string} html - HTMLÂÜÖÂÆπ
 * @returns {string} Â§ÑÁêÜÂêéÁöÑHTML
 */
const processEChartsBlocks = (html) => {
  // È¶ñÂÖàÂ§ÑÁêÜÁ∫ØECharts JSONÈÖçÁΩÆÊ†ºÂºèÔºà‰ª•echartsÂºÄÂ§¥ÁöÑ‰ª£Á†ÅÂùóÔºâ
  const echartsJsonRegex = /```(?:echarts|json)?\s*(echarts[\s\S]*?)```/gi;
  html = html.replace(echartsJsonRegex, (match, content) => {
    try {
      // ÊèêÂèñJSONÈÖçÁΩÆÈÉ®ÂàÜ
      const jsonMatch = content.match(/echarts\s*\n?\s*({[\s\S]*})/i);
      if (jsonMatch) {
        const config = jsonMatch[1];
        const chartId = 'chart_' + Math.random().toString(36).substr(2, 9);
        return `<div class="echarts-container" id="${chartId}"></div>
<script>
(function() {
  try {
    const chartDom = document.getElementById('${chartId}');
    const myChart = echarts.init(chartDom);
    const option = ${config};
    
    // Ëá™Âä®Ë∞ÉÊï¥Âõæ‰æã‰ΩçÁΩÆ‰ª•ÈÅøÂÖç‰∏éÊ†áÈ¢òÈáçÂè†
    if (option.title && option.legend && !option.legend.top) {
      if (option.title.subtext) {
        option.legend.top = '15%'; // ÊúâÂâØÊ†áÈ¢òÊó∂ÔºåÂõæ‰æã‰ΩçÁΩÆÊõ¥Èù†‰∏ã
      } else {
        option.legend.top = '10%'; // Âè™Êúâ‰∏ªÊ†áÈ¢òÊó∂ÔºåÂõæ‰æã‰ΩçÁΩÆÁ®çÂæÆÈù†‰∏ã
      }
    }
    
    myChart.setOption(option);
    window.addEventListener('resize', () => myChart.resize());
  } catch (error) {
    console.error('EChartsÂõæË°®Ê∏≤ÊüìÂ§±Ë¥•:', error);
  }
})();
</script>`;
      }
    } catch (error) {
      console.error('ECharts JSONÈÖçÁΩÆÂ§ÑÁêÜÂ§±Ë¥•:', error);
    }
    return `<pre><code>${escapeHtml(content)}</code></pre>`;
  });
  
  // ÁÑ∂ÂêéÂ§ÑÁêÜJavaScript‰ª£Á†ÅÂùó‰∏≠ÁöÑECharts‰ª£Á†Å
  const echartsRegex = /```(?:javascript|js)?\s*([\s\S]*?)```/gi;
  
  return html.replace(echartsRegex, (match, code) => {
    // Ê£ÄÊü•‰ª£Á†ÅÂùóÊòØÂê¶ÂåÖÂê´EChartsÁõ∏ÂÖ≥‰ª£Á†Å
    if (!(code.includes('echarts') || code.includes('ECharts'))) {
      return `<pre><code>${escapeHtml(code)}</code></pre>`;
    }
    try {
        const chartId = 'chart_' + Math.random().toString(36).substr(2, 9);
        
        // Â¶ÇÊûúÂåÖÂê´ÂÆåÊï¥ÁöÑECharts‰ª£Á†ÅÔºå‰ºòÂÖà‰ΩøÁî®ÂÆåÊï¥‰ª£Á†ÅÊâßË°åÊ®°Âºè
        if (code.includes('echarts.init')) {
          // ÊõøÊç¢DOMÂÖÉÁ¥†ÂºïÁî®‰∏∫Êàë‰ª¨ÁöÑchartId
          let modifiedCode = code.replace(/document\.getElementById\(['"][^'"]*['"]\)/g, `document.getElementById('${chartId}')`);
          // Â¶ÇÊûú‰ª£Á†Å‰∏≠‰ΩøÁî®‰∫ÜÂèòÈáèdomÔºå‰πüË¶ÅÊõøÊç¢
          modifiedCode = modifiedCode.replace(/echarts\.init\(dom\)/g, `echarts.init(document.getElementById('${chartId}'))`);
          
          return `<div class="echarts-container" id="${chartId}"></div>
<script>
(function() {
  try {
    ${modifiedCode}
  } catch (error) {
    console.error('EChartsÂõæË°®Ê∏≤ÊüìÂ§±Ë¥•:', error);
  }
})();
</script>`;
        }
        
        // Âê¶ÂàôÂ∞ùËØïÊèêÂèñÈÖçÁΩÆÂØπË±°
        const configMatch = code.match(/(?:setOption|option)\s*\(\s*({[\s\S]*?})\s*\)/i);
        if (configMatch) {
          const config = configMatch[1];
          return `<div class="echarts-container" id="${chartId}"></div>
<script>
(function() {
  try {
    const chartDom = document.getElementById('${chartId}');
    const myChart = echarts.init(chartDom);
    const option = ${config};
    
    // Ëá™Âä®Ë∞ÉÊï¥Âõæ‰æã‰ΩçÁΩÆ‰ª•ÈÅøÂÖç‰∏éÊ†áÈ¢òÈáçÂè†
    if (option.title && option.legend && !option.legend.top) {
      if (option.title.subtext) {
        option.legend.top = '15%'; // ÊúâÂâØÊ†áÈ¢òÊó∂ÔºåÂõæ‰æã‰ΩçÁΩÆÊõ¥Èù†‰∏ã
      } else {
        option.legend.top = '10%'; // Âè™Êúâ‰∏ªÊ†áÈ¢òÊó∂ÔºåÂõæ‰æã‰ΩçÁΩÆÁ®çÂæÆÈù†‰∏ã
      }
    }
    
    myChart.setOption(option);
    window.addEventListener('resize', () => myChart.resize());
  } catch (error) {
    console.error('EChartsÂõæË°®Ê∏≤ÊüìÂ§±Ë¥•:', error);
  }
})();
</script>`;
        }
        
        // Â¶ÇÊûúÊ≤°ÊúâÂåπÈÖçÂà∞‰ªª‰ΩïEChartsÊ®°ÂºèÔºåËøîÂõûÂéüÂßã‰ª£Á†ÅÂùó
        return `<pre><code>${escapeHtml(code)}</code></pre>`;
    } catch (error) {
      console.error('ECharts‰ª£Á†ÅÂùóÂ§ÑÁêÜÂ§±Ë¥•:', error);
      return `<pre><code>${escapeHtml(code)}</code></pre>`;
    }
  });
};

/**
 * Â§ÑÁêÜMarkdownË°®Ê†º
 * @param {string} html - HTMLÂÜÖÂÆπ
 * @returns {string} Â§ÑÁêÜÂêéÁöÑHTML
 */
const processMarkdownTables = (html) => {
  // ÂåπÈÖçMarkdownË°®Ê†º
  const tableRegex = /\|(.+)\|\n\|([\s\S]*?)\|\n((?:\|.*\|\n?)*)/g;
  
  return html.replace(tableRegex, (match, header, separator, rows) => {
    const headerCells = header.split('|').map(cell => cell.trim()).filter(cell => cell);
    const rowLines = rows.trim().split('\n').filter(line => line.trim());
    
    let tableHtml = '<table><thead><tr>';
    headerCells.forEach(cell => {
      tableHtml += `<th>${cell}</th>`;
    });
    tableHtml += '</tr></thead><tbody>';
    
    rowLines.forEach(line => {
      const cells = line.split('|').map(cell => cell.trim()).filter(cell => cell);
      tableHtml += '<tr>';
      cells.forEach(cell => {
        tableHtml += `<td>${cell}</td>`;
      });
      tableHtml += '</tr>';
    });
    
    tableHtml += '</tbody></table>';
    return tableHtml;
  });
};

/**
 * ËΩ¨‰πâHTMLÁâπÊÆäÂ≠óÁ¨¶
 * @param {string} text - ÈúÄË¶ÅËΩ¨‰πâÁöÑÊñáÊú¨
 * @returns {string} ËΩ¨‰πâÂêéÁöÑÊñáÊú¨
 */
const escapeHtml = (text) => {
  if (!text) return '';
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
};

/**
 * ‰∏ãËΩΩHTMLÊñá‰ª∂
 * @param {string} htmlContent - HTMLÂÜÖÂÆπ
 * @param {string} filename - Êñá‰ª∂Âêç
 */
const downloadHTML = (htmlContent, filename) => {
  console.log('üìÑ HTMLÂÜÖÂÆπÈïøÂ∫¶:', htmlContent.length);
  console.log('üîç HTMLÂÜÖÂÆπÈ¢ÑËßà:', htmlContent.substring(0, 200) + '...');
  
  const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' });
  console.log('üì¶ BlobÂàõÂª∫ÊàêÂäüÔºåÂ§ßÂ∞è:', blob.size, 'bytes');
  
  const url = URL.createObjectURL(blob);
  console.log('üîó URLÂàõÂª∫ÊàêÂäü:', url);
  
  const a = document.createElement('a');
  a.href = url;
  a.download = `${filename || 'ÂØπËØùËÆ∞ÂΩï'}.html`;
  console.log('üíæ ‰∏ãËΩΩÊñá‰ª∂Âêç:', a.download);
  
  document.body.appendChild(a);
  a.click();
  console.log('‚úÖ ‰∏ãËΩΩÈìæÊé•Â∑≤ÁÇπÂáª');
  
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
  console.log('üßπ Ê∏ÖÁêÜÂÆåÊàê');
};